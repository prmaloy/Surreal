{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NavbarPage","React","lazy","Section","About","Process","Gallery","Counter","OurTeam","Footer","Testimonials","Blog","Cta","GetInTouch","App","props","scrollNavigation","document","documentElement","scrollTop","state","pos","setState","navClass","imglight","Loader","id","className","navItems","idnm","navheading","window","addEventListener","this","removeEventListener","Fragment","fallback","Component","Boolean","location","hostname","match","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAGMA,G,YAAaC,IAAMC,MAAK,kBAAM,yDAC9BC,EAAUF,IAAMC,MAAK,kBAAM,gEAC3BE,EAAQH,IAAMC,MAAK,kBAAM,kCACzBG,EAAUJ,IAAMC,MAAK,kBAAM,kCAC3BI,EAAUL,IAAMC,MAAK,kBAAM,wDAC3BK,EAAUN,IAAMC,MAAK,kBAAM,yDAC3BM,EAAUP,IAAMC,MAAK,kBAAM,iCAC3BO,EAASR,IAAMC,MAAK,kBAAM,iCAC1BQ,EAAeT,IAAMC,MAAK,kBAAM,uDAEhCS,GADUV,IAAMC,MAAK,kBAAM,kCACpBD,IAAMC,MAAK,kBAAM,kCACxBU,EAAMX,IAAMC,MAAK,kBAAM,kCACvBW,EAAaZ,IAAMC,MAAK,kBAAM,+DAuGrBY,E,kDAnGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0BVC,iBAAmB,WACFC,SAASC,gBAAgBC,UACxB,EAAKC,MAAMC,IAErB,EAAKC,SAAS,CAACC,SAAW,aAAcC,UAAW,IAInD,EAAKF,SAAS,CAACC,SAAW,GAAIC,UAAW,KAnC9B,EAuCnBC,OAAS,WACL,OACI,yBAAKC,GAAG,aACJ,yBAAKA,GAAG,UACJ,yBAAKC,UAAU,WAAf,iBAzCZ,EAAKP,MAAQ,CACTQ,SAAW,CACP,CAAEF,GAAI,EAAIG,KAAO,OAAQC,WAAY,QACrC,CAAEJ,GAAI,EAAIG,KAAO,QAASC,WAAY,SACtC,CAAEJ,GAAI,EAAIG,KAAO,UAAWC,WAAY,WACxC,CAAEJ,GAAI,EAAIG,KAAO,OAAQC,WAAY,QACrC,CAAEJ,GAAI,EAAIG,KAAO,cAAeC,WAAY,eAE5C,CAAEJ,GAAI,EAAIG,KAAO,OAAQC,WAAY,QACrC,CAAEJ,GAAI,EAAIG,KAAO,UAAWC,WAAY,YAE5CT,IAAMJ,SAASC,gBAAgBC,UAC/BK,UAAW,EACXD,SAAW,IAfA,E,gEAoBfQ,OAAOC,iBAAiB,SAAUC,KAAKjB,kBAAkB,K,6CAIzDe,OAAOG,oBAAoB,SAAUD,KAAKjB,kBAAkB,K,+BA0B5D,OACI,kBAAC,IAAMmB,SAAP,KACI,kBAAC,WAAD,CAAUC,SAAYH,KAAKR,UAGvB,kBAACzB,EAAD,CAAY4B,SAAUK,KAAKb,MAAMQ,SAAUL,SAAUU,KAAKb,MAAMG,SAAUC,SAAUS,KAAKb,MAAMI,WAG/F,kBAACrB,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACE,EAAD,MAMA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACJ,EAAD,Y,GA5FF4B,aCNEC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2D,YCbAC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGJC,IAASC,OAAOF,EAAKzB,SAAS4B,eAAe,SDyHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9bc61635.chunk.js","sourcesContent":["import React, { Component, Suspense } from 'react';\r\nimport \"./theme.scss\";\r\nimport \"./assets/css/materialdesignicons.min.css\";\r\nconst NavbarPage = React.lazy(() => import('./components/Navbar/Navbar_Page'));\r\nconst Section = React.lazy(() => import('./section'));\r\nconst About = React.lazy(() => import('./components/About/about'));\r\nconst Process = React.lazy(() => import('./components/Process/process'));\r\nconst Gallery = React.lazy(() => import('./components/Gallery/gallery'));\r\nconst Counter = React.lazy(() => import('./components/Counter/counter'));\r\nconst OurTeam = React.lazy(() => import('./components/Team/our-team'));\r\nconst Footer = React.lazy(() => import('./components/Footer/footer'));\r\nconst Testimonials = React.lazy(() => import('./components/Testimonials/testimonials'));\r\nconst Pricing = React.lazy(() => import('./components/Pricing/pricing'));\r\nconst Blog = React.lazy(() => import('./components/Blog/blog'));\r\nconst Cta = React.lazy(() => import('./components/Cta/Cta'));\r\nconst GetInTouch = React.lazy(() => import('./components/GetInTouch/GetInTouch'));\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navItems : [\r\n                { id: 1 , idnm : \"home\", navheading: \"Home\" },\r\n                { id: 2 , idnm : \"about\", navheading: \"About\" },\r\n                { id: 3 , idnm : \"gallery\", navheading: \"Gallery\" },\r\n                { id: 4 , idnm : \"team\", navheading: \"Team\" },\r\n                { id: 5 , idnm : \"testimonial\", navheading: \"Testimonial\" },\r\n                \r\n                { id: 7 , idnm : \"blog\", navheading: \"Blog\" },\r\n                { id: 8 , idnm : \"contact\", navheading: \"Contact\" },\r\n            ],\r\n            pos : document.documentElement.scrollTop,\r\n            imglight : true,\r\n            navClass : \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.scrollNavigation, true);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener(\"scroll\", this.scrollNavigation, true);\r\n    }\r\n\r\n    scrollNavigation = () => {\r\n        var scrollup=document.documentElement.scrollTop;\r\n        if(scrollup > this.state.pos)\r\n        {\r\n            this.setState({navClass : \"nav-sticky\", imglight : false});\r\n        }\r\n        else\r\n        {\r\n            this.setState({navClass : \"\", imglight : true});\r\n        }\r\n    };\r\n\r\n    Loader = () => {\r\n        return (\r\n            <div id=\"preloader\">\r\n                <div id=\"status\">\r\n                    <div className=\"spinner\">Loading...</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Suspense fallback = {this.Loader()} >\r\n\r\n                    {/* Importing Navbar */}\r\n                    <NavbarPage navItems={this.state.navItems} navClass={this.state.navClass} imglight={this.state.imglight} />\r\n\r\n                    {/* Importing section */}\r\n                    <Section/>\r\n\r\n                    {/* Importing about us */}\r\n                    <About/>\r\n\r\n                    {/* Importing process */}\r\n                    <Process/>\r\n\r\n                    {/* Importing portfolio */}\r\n                    <Gallery/>\r\n\r\n                    {/* Importing counter */}\r\n                    <Counter/>\r\n\r\n                    {/* Importing team */}\r\n                    <OurTeam/>\r\n\r\n                    {/* Importing testimonials */}\r\n                    <Testimonials/>\r\n\r\n                    \r\n                    \r\n\r\n                    {/* Importing blog */}\r\n                    <Blog/>\r\n\r\n                    {/* Importing cta */}\r\n                    <Cta/>\r\n\r\n                    {/* Importing get in touch */}\r\n                    <GetInTouch/>\r\n                    \r\n                    {/* Importing footer */}\r\n                    <Footer/>\r\n                </Suspense>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();"],"sourceRoot":""}